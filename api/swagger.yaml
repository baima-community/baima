swagger: '2.0'
info:
  description: >-
    The Baima Community System serves as a forum for users to engage in
    discussions and share content. Additionally, it includes a member points
    management system to incentivize user participation.
  version: 0.0.1
  title: Baima
  contact:
    email: zhegao@yahoo.com
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
host: api.baima.co
basePath: /v1
schemes:
  - http
  - https
produces:
  - application/json
  - text/plain
consumes:
  - application/json
  - text/plain
paths:
  /user/login:
    post:
      tags:
        - user
      operationId: login
      summary: Login endpoint
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
              name:
                type: string
      responses:
        '200':
          description: Login successfully
          schema:
            type: object
            properties:
              token:
                type: string
        '401':
          description: Invalid Username or Password
          schema:
            $ref: '#/definitions/APIResponse'
        '404':
          description: User Not Found
          schema:
            $ref: '#/definitions/APIResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/APIResponse'
  /user/logout:
    post:
      tags:
        - user
      operationId: logout
      summary: Logout endpoint
      responses:
        '200':
          description: Logout Successfully
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/APIResponse'
  /user/signup:
    post:
      tags:
        - user
      operationId: signup
      summary: Signup endpoint
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
              name:
                type: string
      responses:
        '200':
          description: User created
          schema:
            $ref: '#/definitions/APIResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/APIResponse'
  /user/check_username:
    get:
      tags:
        - user
      summary: Check if the username is available
      operationId: checkUsername
      parameters:
        - name: username
          in: query
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              available:
                type: boolean
                description: Whether the username is available
  /user/{username}/reset_password:
    post:
      tags:
        - user
      operationId: resetPassword
      summary: Reset user password
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
      responses:
        '200':
          description: Password Updated
          schema:
            $ref: '#/definitions/APIResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/APIResponse'
  /user/{username}/groups:
    get:
      tags:
        - user
      operationId: getUserGroups
      summary: Get user groups
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/APIResponse'
  /user/{username}/profile:
    get:
      tags:
        - user
      operationId: getUser
      summary: Get user profile
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/APIResponse'
    put:
      tags:
        - user
      operationId: updateUser
      summary: Update user profile
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User updated
          schema:
            $ref: '#/definitions/APIResponse'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/APIResponse'

  /user/{username}:
    delete:
      tags:
        - user
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '204':
          description: User deleted
          schema:
            $ref: '#/definitions/APIResponse'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/APIResponse'
  /user/overview:
    get:
      tags:
        - user
      operationId: listUsers
      summary: List all users
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /notifications:
    get:
      tags:
        - notifications
      operationId: getNotifications
      summary: List user notifications
      parameters:
        - name: username
          in: query
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'
  /notifications/send:
    post:
      tags:
        - notifications
      operationId: sendNotifications
      summary: Send notifications to related users
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Notified successfully
          schema:
            $ref: '#/definitions/APIResponse'

  /notifications/{id}/status:
    put:
      tags:
        - notifications
      operationId: updateNotificationStatus
      summary: Update notification status
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uuid
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: Notification ID
              user_id:
                type: string
                format: uuid
              status:
                type: string
                enum:
                  - unread
                  - read
      responses:
        '200':
          description: Notification Status Updated
          schema:
            $ref: '#/definitions/APIResponse'
  /group/overview:
    get:
      tags:
        - group
      operationId: listGroups
      summary: Lists all groups
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
  /group:
    post:
      tags:
        - group
      operationId: createGroup
      summary: Create a group
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Group created
  /group/{id}:
    get:
      tags:
        - group
      operationId: getGroupByID
      summary: Get group by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Group'
    put:
      tags:
        - group
      operationId: updateGroupByID
      summary: Update group by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uuid
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Group updated
    delete:
      tags:
        - group
      operationId: deleteGroupByID
      summary: Delete group by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Group deleted
  /category/overview:
    get:
      tags:
        - category
      operationId: listCategory
      summary: Lists all categories
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
  /category:
    post:
      tags:
        - category
      operationId: createCategory
      summary: Create a category
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Category created
  /category/{id}:
    get:
      tags:
        - category
      summary: Get category by ID
      operationId: getCategoryByID
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Category'
        '404':
          description: Cetegory not found
          schema:
            $ref: '#/definitions/APIResponse'
    put:
      tags:
        - category
      summary: Updated category by ID
      operationId: updateCategoryByID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uuid
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Category updated
    delete:
      tags:
        - category
      summary: Delete category by ID
      operationId: deleteCategoryByID
      parameters:
        - name: id
          in: path
          description: The category that needs to be deleted
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Category deleted
  /topic/overview:
    get:
      tags:
        - topic
      operationId: listTopic
      summary: List topics under a given category
      parameters:
        - name: category_id
          in: query
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Topic'
  /topic:
    post:
      tags:
        - topic
      summary: Create topic
      operationId: createTopic
      parameters:
        - in: body
          name: body
          description: Created topic object
          required: true
          schema:
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Topic create
        '500':
          description: Internal server error
  /topic/{id}:
    get:
      tags:
        - topic
      summary: Get topic details by ID
      operationId: getTopicByID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Topic'
        '404':
          description: Topic not found
    put:
      tags:
        - topic
      summary: Updated topic by ID
      operationId: updateTopic
      parameters:
        - name: id
          in: path
          description: Topic that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated topic object
          required: true
          schema:
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Topic updated
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - topic
      summary: Delete topic by ID
      operationId: deleteTopic
      parameters:
        - name: id
          in: path
          description: The topic that needs to be deleted
          required: true
          type: string
      responses:
        '204':
          description: Topic deleted
        '404':
          description: Topic not found
        '500':
          description: Internal server error
  /points/grant:
    post:
      tags:
        - points
      summary: Grant user points from warehouse
      operationId: grantPoints
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Points'
      responses:
        '200':
          description: Points granted successfully
  /points/overview:
    get:
      tags:
        - points
      summary: Get user historical points changes
      parameters:
        - name: username
          in: query
          description: ID of the user for whom the points history is requested
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              overview:
                type: array
                items:
                  $ref: '#/definitions/Points'
  /points/transfer:
    post:
      tags:
        - points
      summary: Transfer points from current user to another user
      operationId: transferPoints
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Points'
      responses:
        '200':
          description: Points transferred successfully
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/APIResponse'
  /points/warehouse/overview:
    get:
      tags:
        - points
      summary: Get warehouse historical points changes
      operationId: getWarehousePoints
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/WarehousePoints'
  /points/warehouse:
    post:
      tags:
        - points
      summary: Create a warehouse points record
      operationId: createWarehousePoints
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/WarehousePoints'
      responses:
        '200':
          description: Warehouse Points Created
definitions:
  APIResponse:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string
  Group:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        enum:
          - root
          - stem
          - leaf
          - flower
          - pond
          - seed
        example: flower
      display_name:
        type: string
        example: 白玛花花
      users:
        type: array
        items:
          type: string
          format: uuid
  Category:
    type: object
    properties:
      id:
        type: string
        format: uuid
      title:
        type: string
      icon:
        type: string
        format: byte
      description:
        type: string
      created:
        type: string
        format: date-time
      can_edit:
        type: boolean
      topic_overview:
        type: array
        items:
          $ref: '#/definitions/TopicOverview'
  TopicOverview:
    type: array
    items:
      type: object
      required:
        - topic_id
        - category_id
        - title
        - abstract
        - replies
        - last_updated
      properties:
        topic_id:
          type: string
          format: uuid
        title:
          type: string
        abstract:
          type: string
        replies:
          type: integer
        last_updated:
          type: string
          format: date-time
        category_id:
          type: string
          format: uuid
  Topic:
    type: object
    required:
      - id
      - title
      - body
      - user_id
      - username
      - category_id
    properties:
      id:
        type: string
        format: uuid
      category_id:
        type: string
        format: uuid
      title:
        type: string
      body:
        type: string
      tags:
        type: array
        items:
          type: string
      user_id:
        type: string
        format: uuid
      username:
        type: string
      created:
        type: string
        format: date-time
      updated:
        type: string
        format: date-time
      views:
        type: integer
        format: int64
      likes:
        type: integer
        format: int64
      rewards:
        type: array
        items:
          $ref: '#/definitions/Reward'
      replies:
        type: array
        items:
          type: object
          properties:
            schema:
              $ref: '#/definitions/Reply'
  Reply:
    type: object
    required:
      - id
      - topic_id
      - user_id
      - body
      - created
      - likes
    properties:
      id:
        type: string
        format: uuid
      topic_id:
        type: string
        format: uuid
      user_id:
        type: string
      body:
        type: string
      likes:
        type: integer
      created:
        type: string
        format: date-time
  User:
    type: object
    required:
      - id
      - username
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        example: Zhe Gao
      username:
        type: string
        example: zhegao
      role:
        type: string
        enum:
          - superadmin
          - admin
          - user
      avatar:
        type: string
        format: uri
      points:
        type: number
        format: double
      status:
        type: string
        enum:
          - pending
          - enabled
          - disabled
      created:
        type: string
        format: date-time
      rewards_overview:
        type: array
        items:
          $ref: '#/definitions/Reward'
      rewards:
        type: number
        format: double
  Reward:
    type: object
    required:
      - created
      - points
      - note
      - uri
      - from_user_id
      - to_user_id
    properties:
      from_user_id:
        type: string
        format: uuid
        description: ID of the user who change the points
      to_user_id:
        type: string
        format: uuid
      points:
        type: integer
        format: int64
        description: Number of points changed
      note:
        type: string
        description: Note explaining the reason for the points change
      uri:
        type: string
        format: uri
        description: The source page for getting the rewards
      created:
        type: string
        format: date-time
        description: Date of the points change
  WarehousePoints:
    type: object
    required:
      - id
      - user_id
      - points
      - created
    properties:
      id:
        type: string
        format: uuid
      user_id:
        type: string
        format: uuid
      points:
        type: number
        format: double
      created:
        type: string
        format: date-time
      note:
        type: string
  Points:
    type: object
    required:
      - from_user_id
      - to_user_id
      - action
      - created
      - points
    properties:
      from_user_id:
        type: string
        format: uuid
      to_user_id:
        type: string
        format: uuid
      action:
        type: string
        enum:
          - transfer
          - grant
          - reward
      created:
        type: string
        format: date-time
        description: Date of the points change
      points:
        type: number
        format: double
        description: Number of points changed
      note:
        type: string
        description: Note explaining the reason for the points change
  Notification:
    type: object
    required:
      - id
      - title
      - body
      - created
      - is_read
      - to_user_ids
    properties:
      id:
        type: string
        format: uuid
      title:
        type: string
      body:
        type: string
      created:
        type: string
        format: date-time
      is_read:
        type: boolean
      uri:
        type: string
        format: uri
      to_user_ids:
        type: array
        items:
          type: string
          format: uuid
